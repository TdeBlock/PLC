FUNCTION_BLOCK "fbSequence_V7"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Conditions01 { ExternalWritable := 'False'} : Bool;   // Transition conditions for step 1
      Conditions02 { ExternalWritable := 'False'} : Bool;   // Transition conditions for step 2
      Conditions03 { ExternalWritable := 'False'} : Bool;   // Transition conditions for step 3
      Conditions04 { ExternalWritable := 'False'} : Bool;   // Transition conditions for step 4
      Conditions05 { ExternalWritable := 'False'} : Bool;   // Transition conditions for step 5
      Conditions06 { ExternalWritable := 'False'} : Bool;   // Transition conditions for step 6
      Conditions07 { ExternalWritable := 'False'} : Bool;   // Transition conditions for step 7
      Conditions08 { ExternalWritable := 'False'} : Bool;   // Transition conditions for step 8
      RunPermissions : Bool;   // Run permissions - transition from idle to running
      StartPermissions : Bool;   // Start permissions - transition from stop to idle
      Command : Struct
         Start : Bool;   // Start running the sequence from state Idle
         Stop : Bool;   // Stop running and go to Idle state
         Pause : Bool;   // Set the sequence to Paused state
      END_STRUCT;
      Parameter : Struct
         StepDelay_01 : Time;   // Delay after transition conditions are met
         StepDisable_01 : Bool;   // Disable this step. Step will be skipped
         StepDelay_02 : Time;   // Delay after transition conditions are met
         StepDisable_02 : Bool;   // Disable this step. Step will be skipped
         StepDelay_03 : Time;   // Delay after transition conditions are met
         StepDisable_03 : Bool;   // Disable this step. Step will be skipped
         StepDelay_04 : Time;   // Delay after transition conditions are met
         StepDisable_04 : Bool;   // Disable this step. Step will be skipped
         StepDelay_05 : Time;   // Delay after transition conditions are met
         StepDisable_05 : Bool;   // Disable this step. Step will be skipped
         StepDelay_06 : Time;   // Delay after transition conditions are met
         StepDisable_06 : Bool;   // Disable this step. Step will be skipped
         StepDelay_07 : Time;   // Delay after transition conditions are met
         StepDisable_07 : Bool;   // Disable this step. Step will be skipped
         StepDelay_08 : Time;   // Delay after transition conditions are met
         StepDisable_08 : Bool;   // Disable this step. Step will be skipped
         MaxStepTime : Time;   // Sequence will go to paused state when this time is exceeded
         RunContinuously : Bool;   // Repeat cycle until stop command is given
         StepCycle : Bool;   // Stop after each transition and continue with the start command
      END_STRUCT;
   END_VAR

   VAR_OUTPUT 
      Action01 { ExternalWritable := 'False'} : Bool;   // Action for step 1
      Action02 { ExternalWritable := 'False'} : Bool;   // Action for step 2
      Action03 { ExternalWritable := 'False'} : Bool;   // Action for step 3
      Action04 { ExternalWritable := 'False'} : Bool;   // Action for step 4
      Action05 { ExternalWritable := 'False'} : Bool;   // Action for step 5
      Action06 { ExternalWritable := 'False'} : Bool;   // Action for step 6
      Action07 { ExternalWritable := 'False'} : Bool;   // Action for step 7
      Action08 { ExternalWritable := 'False'} : Bool;   // Action for step 8
      Status : Struct
         Idle : Bool;   // Waiting for start command
         Running : Bool;   // Sequence in progress
         Paused : Bool;   // Sequence pause due to transition time-out or pause command
         Stopped : Bool;   // Sequence stopped due to missing start permissions
      END_STRUCT;
   END_VAR

   VAR 
      CurrentStep : Int;   // Current step
      StepDelayTimer {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;   // Step delay timer
      StepDelayEnabled : Bool;   // Step delay timer enabled
      StepPermission : Bool;   // Step permission
      MaxStepTimer {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;   // Maximum step timer
      MaxStepTimerEnabled : Bool;   // Maximum step timer enabled
      TotalRunningTimer {OriginalPartName := 'IEC_TIMER'; LibVersion := '1.0'} : TON_TIME;   // Total running time timer
      Stopping : Bool;   // Indicates the sequence will go to idle after the last step
      RE : Struct   // Rising edges for commands
         Start : Bool;   // Rising edge on start command
         Pause : Bool;   // Rising edge on pause command
         Stop : Bool;   // Rising edge on stop command
      END_STRUCT;
   END_VAR


BEGIN
	//This function block is responsible for controlling a sequence state machine
	//@Author: T. de Block
	
	//Instances and variable initialization
	REGION "Initialization"
	    //Watchdog timer for duration of a step
	    #MaxStepTimer(IN := #Status.Running,
	                    PT := #Parameter.MaxStepTime);
	    
	    //Total sequence timer
	    #TotalRunningTimer(IN := #Status.Running OR #Status.Paused,
	                   PT := T#24H);
	    
	    //Step delay timer
	    #StepDelayTimer(IN := #StepDelayEnabled,
	                  PT := #StepDelayTimer.PT);
	END_REGION
	
	//Handling of external commands
	REGION "Commands"
	    //Start command
	    IF #Command.Start THEN
	        IF #Status.Idle AND #RunPermissions AND NOT #RE.Start THEN
	            #StepPermission := TRUE;
	            #RE.Start := TRUE;
	        END_IF;
	        
	        //If paused resume operation with start command
	        IF #Status.Paused AND NOT #RE.Start THEN
	            #StepPermission := TRUE;
	            #RE.Start := TRUE;
	        END_IF;
	    ELSE
	        #RE.Start := FALSE;
	    END_IF;
	    
	    //Stop command
	    IF #Command.Stop OR (#Status.Running AND NOT #RunPermissions) THEN //Go to stopping if run permissions are lost during running
	        IF NOT #RE.Stop THEN
	            #Stopping := TRUE;
	            #RE.Stop := TRUE;
	        END_IF;
	    ELSE
	        #RE.Stop := FALSE;
	    END_IF;
	    
	    //Pause command
	    //If watchdog timer expires go to paused mode
	    IF #Command.Pause OR #MaxStepTimer.Q THEN
	        IF #Status.Running AND NOT #RE.Pause THEN
	            #StepPermission := FALSE;
	            #RE.Pause := TRUE;
	        END_IF;
	    ELSE
	        #RE.Pause := FALSE;
	    END_IF;
	    
	    //If start permissions are missing go to stop
	    IF NOT #StartPermissions THEN
	        #StepPermission := FALSE;
	        #Stopping := FALSE;
	        #CurrentStep := 0;
	    END_IF;
	END_REGION
	
	//States and transitions
	REGION "States"
	    CASE #CurrentStep OF
	        0:  //Stop
	            IF #StartPermissions THEN
	                #CurrentStep := 5;
	            END_IF;
	            
	        5://Idle
	            #MaxStepTimerEnabled := FALSE;
	            IF #RunPermissions AND #StepPermission THEN
	                #CurrentStep := 10;
	                #StepDelayEnabled := FALSE;
	                IF #Parameter.StepCycle THEN
	                    #StepPermission := FALSE;
	                END_IF;
	            END_IF;
	            
	        10:
	            #MaxStepTimerEnabled := TRUE;
	            IF #Conditions01 AND #StepPermission AND NOT #Parameter.StepDisable_01 THEN //Running
	                #MaxStepTimerEnabled := FALSE;
	                #StepDelayTimer.PT := #Parameter.StepDelay_01;
	                #StepDelayEnabled := TRUE;
	                IF #StepDelayTimer.Q THEN
	                    #CurrentStep := 20;
	                    #StepDelayEnabled := FALSE;
	                    IF #Parameter.StepCycle THEN
	                        #StepPermission := FALSE;
	                    END_IF;
	                END_IF;
	            ELSIF #Parameter.StepDisable_01 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #CurrentStep := 20;
	            END_IF;
	            
	        20:
	            #MaxStepTimerEnabled := TRUE;
	            IF #Conditions02 AND #StepPermission AND NOT #Parameter.StepDisable_02 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #StepDelayTimer.PT := #Parameter.StepDelay_02;
	                #StepDelayEnabled := TRUE;
	                IF #StepDelayTimer.Q THEN
	                    #CurrentStep := 30;
	                    #StepDelayEnabled := FALSE;
	                    IF #Parameter.StepCycle THEN
	                        #StepPermission := FALSE;
	                    END_IF;
	                END_IF;
	            ELSIF #Parameter.StepDisable_02 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #CurrentStep := 30;
	            END_IF;
	            
	        30:
	            #MaxStepTimerEnabled := TRUE;
	            IF #Conditions03 AND #StepPermission AND NOT #Parameter.StepDisable_03 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #StepDelayTimer.PT := #Parameter.StepDelay_03;
	                #StepDelayEnabled := TRUE;
	                IF #StepDelayTimer.Q THEN
	                    #CurrentStep := 40;
	                    #StepDelayEnabled := FALSE;
	                    IF #Parameter.StepCycle THEN
	                        #StepPermission := FALSE;
	                    END_IF;
	                END_IF;
	            ELSIF #Parameter.StepDisable_03 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #CurrentStep := 40;
	            END_IF;
	            
	        40:
	            #MaxStepTimerEnabled := TRUE;
	            IF #Conditions04 AND #StepPermission AND NOT #Parameter.StepDisable_04 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #StepDelayTimer.PT := #Parameter.StepDelay_04;
	                #StepDelayEnabled := TRUE;
	                IF #StepDelayTimer.Q THEN
	                    #CurrentStep := 50;
	                    #StepDelayEnabled := FALSE;
	                    IF #Parameter.StepCycle THEN
	                        #StepPermission := FALSE;
	                    END_IF;
	                END_IF;
	            ELSIF #Parameter.StepDisable_04 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #CurrentStep := 50;
	            END_IF;
	            
	        50:
	            #MaxStepTimerEnabled := TRUE;
	            IF #Conditions05 AND #StepPermission AND NOT #Parameter.StepDisable_05 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #StepDelayTimer.PT := #Parameter.StepDelay_05;
	                #StepDelayEnabled := TRUE;
	                IF #StepDelayTimer.Q THEN
	                    #CurrentStep := 60;
	                    #StepDelayEnabled := FALSE;
	                    IF #Parameter.StepCycle THEN
	                        #StepPermission := FALSE;
	                    END_IF;
	                END_IF;
	            ELSIF #Parameter.StepDisable_05 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #CurrentStep := 60;
	            END_IF;
	            
	        60:
	            #MaxStepTimerEnabled := TRUE;
	            IF #Conditions06 AND #StepPermission AND NOT #Parameter.StepDisable_06 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #StepDelayTimer.PT := #Parameter.StepDelay_06;
	                #StepDelayEnabled := TRUE;
	                IF #StepDelayTimer.Q THEN
	                    #CurrentStep := 70;
	                    #StepDelayEnabled := FALSE;
	                    IF #Parameter.StepCycle THEN
	                        #StepPermission := FALSE;
	                    END_IF;
	                END_IF;
	            ELSIF #Parameter.StepDisable_06 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #CurrentStep := 70;
	            END_IF;
	            
	        70:
	            #MaxStepTimerEnabled := TRUE;
	            IF #Conditions07 AND #StepPermission AND NOT #Parameter.StepDisable_07 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #StepDelayTimer.PT := #Parameter.StepDelay_07;
	                #StepDelayEnabled := TRUE;
	                IF #StepDelayTimer.Q THEN
	                    #CurrentStep := 80;
	                    #StepDelayEnabled := FALSE;
	                    IF #Parameter.StepCycle THEN
	                        #StepPermission := FALSE;
	                    END_IF;
	                END_IF;
	            ELSIF #Parameter.StepDisable_07 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #CurrentStep := 80;
	            END_IF;
	            
	        80:
	            #MaxStepTimerEnabled := TRUE;
	            IF #Conditions08 AND #StepPermission AND NOT #Parameter.StepDisable_08 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #StepDelayTimer.PT := #Parameter.StepDelay_08;
	                #StepDelayEnabled := TRUE;
	                IF #StepDelayTimer.Q THEN
	                    #CurrentStep := 999;
	                    #StepDelayEnabled := FALSE;
	                END_IF;
	            ELSIF #Parameter.StepDisable_08 THEN
	                #MaxStepTimerEnabled := FALSE;
	                #CurrentStep := 999;
	            END_IF;
	            
	        999:
	            IF (NOT #Parameter.RunContinuously) OR (#Parameter.RunContinuously AND #Stopping) THEN
	                #StepPermission := FALSE;
	            END_IF;
	            #StepDelayEnabled := FALSE;
	            #Stopping := FALSE;
	            #CurrentStep := 0;
	    END_CASE;
	END_REGION
	
	//Reflection of internal status to interface
	REGION "Status"
	    //Update output actions according to step number 
	    #Action01 := ((#CurrentStep = 10) AND NOT #Parameter.StepDisable_01);
	    #Action02 := ((#CurrentStep = 20) AND NOT #Parameter.StepDisable_02);
	    #Action03 := ((#CurrentStep = 30) AND NOT #Parameter.StepDisable_03);
	    #Action04 := ((#CurrentStep = 40) AND NOT #Parameter.StepDisable_04);
	    #Action05 := ((#CurrentStep = 50) AND NOT #Parameter.StepDisable_05);
	    #Action06 := ((#CurrentStep = 60) AND NOT #Parameter.StepDisable_06);
	    #Action07 := ((#CurrentStep = 70) AND NOT #Parameter.StepDisable_07);
	    #Action08 := ((#CurrentStep = 80) AND NOT #Parameter.StepDisable_08);
	    
	    //Update status
	    IF #CurrentStep = 0 THEN
	        #Status.Idle := FALSE;
	        #Status.Running := FALSE;
	        #Status.Paused := FALSE;
	        #Status.Stopped := TRUE;
	    ELSIF #CurrentStep = 5 THEN
	        #Status.Idle := TRUE;
	        #Status.Running := FALSE;
	        #Status.Paused := FALSE;
	        #Status.Stopped := FALSE;
	    ELSIF #CurrentStep > 5 AND #StepPermission THEN
	        #Status.Idle := FALSE;
	        #Status.Running := TRUE;
	        #Status.Paused := FALSE;
	        #Status.Stopped := FALSE;
	    ELSIF #CurrentStep > 5 AND NOT #StepPermission THEN
	        #Status.Idle := FALSE;
	        #Status.Running := FALSE;
	        #Status.Paused := TRUE;
	        #Status.Stopped := FALSE;
	    ELSE //Uninitialised
	        #Status.Idle := FALSE;
	        #Status.Running := FALSE;
	        #Status.Paused := FALSE;
	        #Status.Stopped := FALSE;
	    END_IF;
	    
	END_REGION
	
	
	
	
	
	
	
END_FUNCTION_BLOCK

