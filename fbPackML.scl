FUNCTION_BLOCK "fbPackML_V2"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Command { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         Start { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // The start command will move the unit into theStarting state.
         Hold { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // The Hold command changes the unit from the EXECUTE state to the HOLDING state
         UnHold { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // The Unhold command releases the HOLD state and moves the unit to the UNHOLDING state and then back to EXECUTE state
         Suspend { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // A Suspend command may come as the result of upstream or downstream problems outside the unit itself
         UnSuspend { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // The Unsuspend command releases the unit/machine from SUSPENDED state and moves to the UNSUSPENDING state and finally to the EXECUTE state
         ExecuteCompleted { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Moves the unit from the EXECUTE state to the COMPLETING state and finally the COMPLETE state
         StateCompleted { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // The State Completed (SC) is an internal unit action which moves the unit itself to the next state. The SC is activated when the appropriate unit conditions are reached
         Stop { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // The Stop command will start the execution of logic which brings the unit to the STOPPING state and finally to the STOPPED state
         Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Initiate on the unit that is ready for production and move the unit/machine into the IDLE state via the RESETTING state
         Abort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Will change the unit to the Aborting state and to the transitional state ABORTING and the secure state ABORTED
         Clear { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   //  Proceed to a CLEARING state and then the STOPPED state
      END_STRUCT;
      Parameter { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         DisableStarting { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         DisableHolding { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         DisableUnHolding { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         DisableSuspending { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         DisableUnSuspending { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         DisableCompleting { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         DisableAborting { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         DisableClearing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         DisableStopping { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         DisableResetting { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      END_STRUCT;
      Initialize : Bool;
   END_VAR

   VAR_OUTPUT 
      Status { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         Idle { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Wait state: Unit ready awaiting start command
         Starting { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state: Unit is starting up to go to Execute state
         Execute { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state: Unit is producing
         Holding { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state: Unit is stopping before going to held state
         Held { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Wait state: Represents an error state which will generate an alarm or warning
         Unholding { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state: Unit is starting up to go to Execute state
         Suspending { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state: Unit is stopping before going to suspended state
         Suspended { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Wait state: The unit is not producing
         UnSuspending { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state: Unit is starting up to go to Execute state
         Completing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state: The unit is stopping before going to complete state
         Complete { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Wait state: Unit process is complete awaiting reset command
         Stopping { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state: Unit is stopping before going to stopped state
         Stopped { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Wait state: Unit is stopped awaiting reset command
         Aborting { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state: Unit is stopping before going to aborted state
         Aborted { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Wait state: Unit is stopped awaiting clear command
         Clearing { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state:  Clear faults that may have occurred when ABORTING and were presented in the ABORTED state
         Resetting { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Acting state: Unit is resetting before going to idle state
      END_STRUCT;
   END_VAR

   VAR 
      CurrentState { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Current state
      RE { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct   // Rising edges for commands
         Start { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         Hold { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         UnHold { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         Suspend { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         UnSuspend { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         ExecuteCompleted { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         StateCompleted { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         Stop { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         Abort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         Clear { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      END_STRUCT;
   END_VAR

   VAR_TEMP 
      InitialState : Int;
   END_VAR

   VAR CONSTANT 
      StateIdle : Int := 1;
      StateStarting : Int := 3;
      StateExecute : Int := 6;
      StateCompleting : Int := 16;
      StateComplete : Int := 17;
      StateResetting : Int := 15;
      StateHolding : Int := 10;
      StateHeld : Int := 11;
      StateUnholding : Int := 12;
      StateSuspending : Int := 13;
      StateSuspended : Int := 5;
      StateUnsuspending : Int := 14;
      StateStopping : Int := 7;
      StateStopped : Int := 2;
      StateAborting : Int := 8;
      StateAborted : Int := 9;
      StateClearing : Int := 18;
   END_VAR


BEGIN
	// This function block is responsible for handling the PackML states
	// @Author: T. de Block
	
	//Instances and variable initialization
	REGION "Initialization"
	    IF #Initialize THEN
	        #InitialState := #StateStopped;
	        #CurrentState := #InitialState;
	    END_IF;
	END_REGION
	
	//Handling of external commands
	REGION "Commands"
	    //Start command
	    IF #Command.Start THEN
	        IF NOT #RE.Start THEN
	            #RE.Start := TRUE;
	        END_IF;
	    ELSE
	        #RE.Start := FALSE;
	    END_IF;
	    
	    //Hold command
	    IF #Command.Hold THEN
	        IF NOT #RE.Hold THEN
	            #RE.Hold := TRUE;
	        END_IF;
	    ELSE
	        #RE.Hold := FALSE;
	    END_IF;
	    
	    //Unhold command
	    IF #Command.UnHold THEN
	        IF NOT #RE.UnHold THEN
	            #RE.UnHold := TRUE;
	        END_IF;
	    ELSE
	        #RE.UnHold := FALSE;
	    END_IF;
	    
	    //Suspend command
	    IF #Command.Suspend THEN
	        IF NOT #RE.Suspend THEN
	            #RE.Suspend := TRUE;
	        END_IF;
	    ELSE
	        #RE.Suspend := FALSE;
	    END_IF;
	    
	    //Unsuspend command
	    IF #Command.UnSuspend THEN
	        IF NOT #RE.UnSuspend THEN
	            #RE.UnSuspend := TRUE;
	        END_IF;
	    ELSE
	        #RE.UnSuspend := FALSE;
	    END_IF;
	    
	    //Execute complete command
	    IF #Command.ExecuteCompleted THEN
	        IF NOT #RE.ExecuteCompleted THEN
	            #RE.ExecuteCompleted := TRUE;
	        END_IF;
	    ELSE
	        #RE.ExecuteCompleted := FALSE;
	    END_IF;
	    
	    //State complete command
	    IF #Command.StateCompleted THEN
	        IF NOT #RE.StateCompleted THEN
	            #RE.StateCompleted := TRUE;
	        END_IF;
	    ELSE
	        #RE.StateCompleted := FALSE;
	    END_IF;
	    
	    //Stop command
	    IF #Command.Stop THEN
	        IF NOT #RE.Stop THEN
	            #RE.Stop := TRUE;
	            IF NOT (#Status.Aborted OR #Status.Aborting OR #Status.Clearing OR #Status.Stopped) THEN
	                #CurrentState := #StateStopping;
	            END_IF;
	        END_IF;
	    ELSE
	        #RE.Stop := FALSE;
	    END_IF;
	    
	    //Reset command
	    IF #Command.Reset THEN
	        IF NOT #RE.Reset THEN
	            #RE.Reset := TRUE;
	        END_IF;
	    ELSE
	        #RE.Reset := FALSE;
	    END_IF;
	    
	    //Abort command
	    IF #Command.Abort THEN
	        IF NOT #RE.Abort THEN
	            #RE.Abort := TRUE;
	            #CurrentState := #StateAborting;
	        END_IF;
	    ELSE
	        #RE.Abort := FALSE;
	    END_IF;
	    
	    //Clear command
	    IF #Command.Clear THEN
	        IF NOT #RE.Clear THEN
	            #RE.Clear := TRUE;
	        END_IF;
	    ELSE
	        #RE.Clear := FALSE;
	    END_IF;
	END_REGION
	
	//States and transitions
	REGION "States"
	    CASE #CurrentState OF
	        #StateClearing:    //Clearing state
	            IF #RE.StateCompleted OR #Parameter.DisableClearing THEN
	                #CurrentState := #StateStopped;
	            END_IF;
	            
	        #StateStopped:     //Stopped state
	            IF #RE.Reset THEN
	                #CurrentState := #StateResetting;
	            END_IF;
	            
	        #StateResetting:   //Resetting state
	            IF #RE.StateCompleted OR #Parameter.DisableResetting THEN
	                #CurrentState := #StateIdle;
	            END_IF;
	            
	        #StateIdle:  // Idle state
	            IF #RE.Start THEN
	                #CurrentState := #StateStarting;
	            END_IF;
	            
	        #StateStarting:  // Starting state
	            IF #RE.StateCompleted OR #Parameter.DisableStarting THEN
	                #CurrentState := #StateExecute;
	            END_IF;
	            
	        #StateExecute: //Execute state
	            IF #RE.Hold THEN
	                #CurrentState := #StateHolding;
	            ELSIF #RE.Suspend THEN
	                #CurrentState := #StateSuspending;
	            ELSIF #RE.ExecuteCompleted THEN
	                #CurrentState := #StateCompleting;
	            END_IF;
	            
	        #StateHolding: //Holding state
	            IF #RE.StateCompleted OR #Parameter.DisableHolding THEN
	                #CurrentState := #StateHeld;
	            END_IF;
	            
	        #StateHeld:    //Held state
	            IF #RE.UnHold THEN
	                #CurrentState := #StateUnholding;
	            END_IF;
	            
	        #StateUnholding:   //Unholding state
	            IF #RE.StateCompleted OR #Parameter.DisableUnHolding THEN
	                #CurrentState := #StateExecute;
	            END_IF;
	            
	        #StateSuspending:  //Suspending state
	            IF #RE.StateCompleted OR #Parameter.DisableSuspending THEN
	                #CurrentState := #StateSuspended;
	            END_IF;
	            
	        #StateSuspended:   //Suspended state
	            IF #RE.UnSuspend THEN
	                #CurrentState := #StateUnsuspending;
	            END_IF;
	            
	        #StateUnsuspending:    //Unsuspending state
	            IF #RE.StateCompleted OR #Parameter.DisableUnSuspending THEN
	                #CurrentState := #StateExecute;
	            END_IF;
	            
	        #StateCompleting:  //Completing state
	            IF #RE.StateCompleted OR #Parameter.DisableCompleting THEN
	                #CurrentState := #StateComplete;
	            END_IF;
	            
	        #StateComplete:    //Completed state
	            IF #RE.Reset THEN
	                #CurrentState := #StateResetting;
	            END_IF;
	            
	            #StateStopping:    //Stopping state
	                IF #RE.StateCompleted OR #Parameter.DisableStopping THEN
	                #CurrentState := #StateStopped;
	            END_IF;
	            
	        #StateAborting:    //Aborting state
	            IF #RE.StateCompleted OR #Parameter.DisableAborting THEN
	                #CurrentState := #StateAborted;
	            END_IF;
	            
	        #StateAborted:     //Aborted state
	            IF #RE.Clear THEN
	                #CurrentState := #StateClearing;
	            END_IF;
	    END_CASE;
	    
	END_REGION
	
	//Reflection of internal status to interface
	REGION "Status"
	    #Status.Aborted := (#CurrentState = #StateAborted);
	    #Status.Aborting := (#CurrentState = #StateAborting);
	    #Status.Clearing := (#CurrentState = #StateClearing);
	    #Status.Complete := (#CurrentState = #StateComplete);
	    #Status.Completing := (#CurrentState = #StateCompleting);
	    #Status.Execute := (#CurrentState = #StateExecute);
	    #Status.Held := (#CurrentState = #StateHeld);
	    #Status.Holding := (#CurrentState = #StateHolding);
	    #Status.Idle := (#CurrentState = #StateIdle);
	    #Status.Resetting := (#CurrentState = #StateResetting);
	    #Status.Starting := (#CurrentState = #StateStarting);
	    #Status.Stopped := (#CurrentState = #StateStopped);
	    #Status.Stopping := (#CurrentState = #StateStopping);
	    #Status.Suspended := (#CurrentState = #StateSuspended);
	    #Status.Suspending := (#CurrentState = #StateSuspending);
	    #Status.Unholding := (#CurrentState = #StateUnholding);
	    #Status.UnSuspending := (#CurrentState = #StateUnsuspending);
	END_REGION
END_FUNCTION_BLOCK

